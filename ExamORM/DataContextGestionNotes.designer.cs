#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExamORM
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Gestion_Notes_BDD")]
	public partial class DataContextGestionNotesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Définitions de méthodes d'extensibilité
    partial void OnCreated();
    partial void Insertclasse(classe instance);
    partial void Updateclasse(classe instance);
    partial void Deleteclasse(classe instance);
    partial void Insertdevoir(devoir instance);
    partial void Updatedevoir(devoir instance);
    partial void Deletedevoir(devoir instance);
    partial void Inserteleve(eleve instance);
    partial void Updateeleve(eleve instance);
    partial void Deleteeleve(eleve instance);
    partial void Insertmatiere(matiere instance);
    partial void Updatematiere(matiere instance);
    partial void Deletematiere(matiere instance);
    #endregion
		
		public DataContextGestionNotesDataContext() : 
				base(global::ExamORM.Properties.Settings.Default.Gestion_Notes_BDDConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataContextGestionNotesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContextGestionNotesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContextGestionNotesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContextGestionNotesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<classe> classe
		{
			get
			{
				return this.GetTable<classe>();
			}
		}
		
		public System.Data.Linq.Table<suivre> suivre
		{
			get
			{
				return this.GetTable<suivre>();
			}
		}
		
		public System.Data.Linq.Table<devoir> devoir
		{
			get
			{
				return this.GetTable<devoir>();
			}
		}
		
		public System.Data.Linq.Table<eleve> eleve
		{
			get
			{
				return this.GetTable<eleve>();
			}
		}
		
		public System.Data.Linq.Table<matiere> matiere
		{
			get
			{
				return this.GetTable<matiere>();
			}
		}
		
		public System.Data.Linq.Table<noter> noter
		{
			get
			{
				return this.GetTable<noter>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.classe")]
	public partial class classe : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_classe;
		
		private string _libelle;
		
		private string _libelle_court;
		
		private EntitySet<devoir> _devoir;
		
		private EntitySet<eleve> _eleve;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_classeChanging(int value);
    partial void Onid_classeChanged();
    partial void OnlibelleChanging(string value);
    partial void OnlibelleChanged();
    partial void Onlibelle_courtChanging(string value);
    partial void Onlibelle_courtChanged();
    #endregion
		
		public classe()
		{
			this._devoir = new EntitySet<devoir>(new Action<devoir>(this.attach_devoir), new Action<devoir>(this.detach_devoir));
			this._eleve = new EntitySet<eleve>(new Action<eleve>(this.attach_eleve), new Action<eleve>(this.detach_eleve));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_classe", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_classe
		{
			get
			{
				return this._id_classe;
			}
			set
			{
				if ((this._id_classe != value))
				{
					this.Onid_classeChanging(value);
					this.SendPropertyChanging();
					this._id_classe = value;
					this.SendPropertyChanged("id_classe");
					this.Onid_classeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_libelle", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string libelle
		{
			get
			{
				return this._libelle;
			}
			set
			{
				if ((this._libelle != value))
				{
					this.OnlibelleChanging(value);
					this.SendPropertyChanging();
					this._libelle = value;
					this.SendPropertyChanged("libelle");
					this.OnlibelleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_libelle_court", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string libelle_court
		{
			get
			{
				return this._libelle_court;
			}
			set
			{
				if ((this._libelle_court != value))
				{
					this.Onlibelle_courtChanging(value);
					this.SendPropertyChanging();
					this._libelle_court = value;
					this.SendPropertyChanged("libelle_court");
					this.Onlibelle_courtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="classe_devoir", Storage="_devoir", ThisKey="id_classe", OtherKey="id_classe")]
		public EntitySet<devoir> devoir
		{
			get
			{
				return this._devoir;
			}
			set
			{
				this._devoir.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="classe_eleve", Storage="_eleve", ThisKey="id_classe", OtherKey="id_classe")]
		public EntitySet<eleve> eleve
		{
			get
			{
				return this._eleve;
			}
			set
			{
				this._eleve.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_devoir(devoir entity)
		{
			this.SendPropertyChanging();
			entity.classe = this;
		}
		
		private void detach_devoir(devoir entity)
		{
			this.SendPropertyChanging();
			entity.classe = null;
		}
		
		private void attach_eleve(eleve entity)
		{
			this.SendPropertyChanging();
			entity.classe = this;
		}
		
		private void detach_eleve(eleve entity)
		{
			this.SendPropertyChanging();
			entity.classe = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.suivre")]
	public partial class suivre
	{
		
		private int _id_classe;
		
		private int _id_matiere;
		
		public suivre()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_classe", DbType="Int NOT NULL")]
		public int id_classe
		{
			get
			{
				return this._id_classe;
			}
			set
			{
				if ((this._id_classe != value))
				{
					this._id_classe = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_matiere", DbType="Int NOT NULL")]
		public int id_matiere
		{
			get
			{
				return this._id_matiere;
			}
			set
			{
				if ((this._id_matiere != value))
				{
					this._id_matiere = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.devoir")]
	public partial class devoir : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_devoir;
		
		private string _libelle;
		
		private System.DateTime _date_devoir;
		
		private double _coeff;
		
		private int _id_matiere;
		
		private int _id_classe;
		
		private EntityRef<classe> _classe;
		
		private EntityRef<matiere> _matiere;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_devoirChanging(int value);
    partial void Onid_devoirChanged();
    partial void OnlibelleChanging(string value);
    partial void OnlibelleChanged();
    partial void Ondate_devoirChanging(System.DateTime value);
    partial void Ondate_devoirChanged();
    partial void OncoeffChanging(double value);
    partial void OncoeffChanged();
    partial void Onid_matiereChanging(int value);
    partial void Onid_matiereChanged();
    partial void Onid_classeChanging(int value);
    partial void Onid_classeChanged();
    #endregion
		
		public devoir()
		{
			this._classe = default(EntityRef<classe>);
			this._matiere = default(EntityRef<matiere>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_devoir", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_devoir
		{
			get
			{
				return this._id_devoir;
			}
			set
			{
				if ((this._id_devoir != value))
				{
					this.Onid_devoirChanging(value);
					this.SendPropertyChanging();
					this._id_devoir = value;
					this.SendPropertyChanged("id_devoir");
					this.Onid_devoirChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_libelle", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string libelle
		{
			get
			{
				return this._libelle;
			}
			set
			{
				if ((this._libelle != value))
				{
					this.OnlibelleChanging(value);
					this.SendPropertyChanging();
					this._libelle = value;
					this.SendPropertyChanged("libelle");
					this.OnlibelleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_devoir", DbType="Date NOT NULL")]
		public System.DateTime date_devoir
		{
			get
			{
				return this._date_devoir;
			}
			set
			{
				if ((this._date_devoir != value))
				{
					this.Ondate_devoirChanging(value);
					this.SendPropertyChanging();
					this._date_devoir = value;
					this.SendPropertyChanged("date_devoir");
					this.Ondate_devoirChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_coeff", DbType="Float NOT NULL")]
		public double coeff
		{
			get
			{
				return this._coeff;
			}
			set
			{
				if ((this._coeff != value))
				{
					this.OncoeffChanging(value);
					this.SendPropertyChanging();
					this._coeff = value;
					this.SendPropertyChanged("coeff");
					this.OncoeffChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_matiere", DbType="Int NOT NULL")]
		public int id_matiere
		{
			get
			{
				return this._id_matiere;
			}
			set
			{
				if ((this._id_matiere != value))
				{
					if (this._matiere.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_matiereChanging(value);
					this.SendPropertyChanging();
					this._id_matiere = value;
					this.SendPropertyChanged("id_matiere");
					this.Onid_matiereChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_classe", DbType="Int NOT NULL")]
		public int id_classe
		{
			get
			{
				return this._id_classe;
			}
			set
			{
				if ((this._id_classe != value))
				{
					if (this._classe.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_classeChanging(value);
					this.SendPropertyChanging();
					this._id_classe = value;
					this.SendPropertyChanged("id_classe");
					this.Onid_classeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="classe_devoir", Storage="_classe", ThisKey="id_classe", OtherKey="id_classe", IsForeignKey=true)]
		public classe classe
		{
			get
			{
				return this._classe.Entity;
			}
			set
			{
				classe previousValue = this._classe.Entity;
				if (((previousValue != value) 
							|| (this._classe.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._classe.Entity = null;
						previousValue.devoir.Remove(this);
					}
					this._classe.Entity = value;
					if ((value != null))
					{
						value.devoir.Add(this);
						this._id_classe = value.id_classe;
					}
					else
					{
						this._id_classe = default(int);
					}
					this.SendPropertyChanged("classe");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="matiere_devoir", Storage="_matiere", ThisKey="id_matiere", OtherKey="id_matiere", IsForeignKey=true)]
		public matiere matiere
		{
			get
			{
				return this._matiere.Entity;
			}
			set
			{
				matiere previousValue = this._matiere.Entity;
				if (((previousValue != value) 
							|| (this._matiere.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._matiere.Entity = null;
						previousValue.devoir.Remove(this);
					}
					this._matiere.Entity = value;
					if ((value != null))
					{
						value.devoir.Add(this);
						this._id_matiere = value.id_matiere;
					}
					else
					{
						this._id_matiere = default(int);
					}
					this.SendPropertyChanged("matiere");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.eleve")]
	public partial class eleve : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_eleve;
		
		private string _nom;
		
		private string _prenom;
		
		private System.DateTime _ddn;
		
		private string _mail;
		
		private string _mdp;
		
		private int _id_classe;
		
		private EntityRef<classe> _classe;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_eleveChanging(int value);
    partial void Onid_eleveChanged();
    partial void OnnomChanging(string value);
    partial void OnnomChanged();
    partial void OnprenomChanging(string value);
    partial void OnprenomChanged();
    partial void OnddnChanging(System.DateTime value);
    partial void OnddnChanged();
    partial void OnmailChanging(string value);
    partial void OnmailChanged();
    partial void OnmdpChanging(string value);
    partial void OnmdpChanged();
    partial void Onid_classeChanging(int value);
    partial void Onid_classeChanged();
    #endregion
		
		public eleve()
		{
			this._classe = default(EntityRef<classe>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_eleve", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_eleve
		{
			get
			{
				return this._id_eleve;
			}
			set
			{
				if ((this._id_eleve != value))
				{
					this.Onid_eleveChanging(value);
					this.SendPropertyChanging();
					this._id_eleve = value;
					this.SendPropertyChanged("id_eleve");
					this.Onid_eleveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nom", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string nom
		{
			get
			{
				return this._nom;
			}
			set
			{
				if ((this._nom != value))
				{
					this.OnnomChanging(value);
					this.SendPropertyChanging();
					this._nom = value;
					this.SendPropertyChanged("nom");
					this.OnnomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_prenom", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string prenom
		{
			get
			{
				return this._prenom;
			}
			set
			{
				if ((this._prenom != value))
				{
					this.OnprenomChanging(value);
					this.SendPropertyChanging();
					this._prenom = value;
					this.SendPropertyChanged("prenom");
					this.OnprenomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ddn", DbType="Date NOT NULL")]
		public System.DateTime ddn
		{
			get
			{
				return this._ddn;
			}
			set
			{
				if ((this._ddn != value))
				{
					this.OnddnChanging(value);
					this.SendPropertyChanging();
					this._ddn = value;
					this.SendPropertyChanged("ddn");
					this.OnddnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mail", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string mail
		{
			get
			{
				return this._mail;
			}
			set
			{
				if ((this._mail != value))
				{
					this.OnmailChanging(value);
					this.SendPropertyChanging();
					this._mail = value;
					this.SendPropertyChanged("mail");
					this.OnmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mdp", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string mdp
		{
			get
			{
				return this._mdp;
			}
			set
			{
				if ((this._mdp != value))
				{
					this.OnmdpChanging(value);
					this.SendPropertyChanging();
					this._mdp = value;
					this.SendPropertyChanged("mdp");
					this.OnmdpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_classe", DbType="Int NOT NULL")]
		public int id_classe
		{
			get
			{
				return this._id_classe;
			}
			set
			{
				if ((this._id_classe != value))
				{
					if (this._classe.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_classeChanging(value);
					this.SendPropertyChanging();
					this._id_classe = value;
					this.SendPropertyChanged("id_classe");
					this.Onid_classeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="classe_eleve", Storage="_classe", ThisKey="id_classe", OtherKey="id_classe", IsForeignKey=true)]
		public classe classe
		{
			get
			{
				return this._classe.Entity;
			}
			set
			{
				classe previousValue = this._classe.Entity;
				if (((previousValue != value) 
							|| (this._classe.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._classe.Entity = null;
						previousValue.eleve.Remove(this);
					}
					this._classe.Entity = value;
					if ((value != null))
					{
						value.eleve.Add(this);
						this._id_classe = value.id_classe;
					}
					else
					{
						this._id_classe = default(int);
					}
					this.SendPropertyChanged("classe");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.matiere")]
	public partial class matiere : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_matiere;
		
		private string _libelle;
		
		private string _libelle_court;
		
		private EntitySet<devoir> _devoir;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_matiereChanging(int value);
    partial void Onid_matiereChanged();
    partial void OnlibelleChanging(string value);
    partial void OnlibelleChanged();
    partial void Onlibelle_courtChanging(string value);
    partial void Onlibelle_courtChanged();
    #endregion
		
		public matiere()
		{
			this._devoir = new EntitySet<devoir>(new Action<devoir>(this.attach_devoir), new Action<devoir>(this.detach_devoir));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_matiere", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_matiere
		{
			get
			{
				return this._id_matiere;
			}
			set
			{
				if ((this._id_matiere != value))
				{
					this.Onid_matiereChanging(value);
					this.SendPropertyChanging();
					this._id_matiere = value;
					this.SendPropertyChanged("id_matiere");
					this.Onid_matiereChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_libelle", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string libelle
		{
			get
			{
				return this._libelle;
			}
			set
			{
				if ((this._libelle != value))
				{
					this.OnlibelleChanging(value);
					this.SendPropertyChanging();
					this._libelle = value;
					this.SendPropertyChanged("libelle");
					this.OnlibelleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_libelle_court", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string libelle_court
		{
			get
			{
				return this._libelle_court;
			}
			set
			{
				if ((this._libelle_court != value))
				{
					this.Onlibelle_courtChanging(value);
					this.SendPropertyChanging();
					this._libelle_court = value;
					this.SendPropertyChanged("libelle_court");
					this.Onlibelle_courtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="matiere_devoir", Storage="_devoir", ThisKey="id_matiere", OtherKey="id_matiere")]
		public EntitySet<devoir> devoir
		{
			get
			{
				return this._devoir;
			}
			set
			{
				this._devoir.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_devoir(devoir entity)
		{
			this.SendPropertyChanging();
			entity.matiere = this;
		}
		
		private void detach_devoir(devoir entity)
		{
			this.SendPropertyChanging();
			entity.matiere = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.noter")]
	public partial class noter
	{
		
		private int _id_eleve;
		
		private int _id_devoir;
		
		private bool _absent;
		
		private double _note;
		
		public noter()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_eleve", DbType="Int NOT NULL")]
		public int id_eleve
		{
			get
			{
				return this._id_eleve;
			}
			set
			{
				if ((this._id_eleve != value))
				{
					this._id_eleve = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_devoir", DbType="Int NOT NULL")]
		public int id_devoir
		{
			get
			{
				return this._id_devoir;
			}
			set
			{
				if ((this._id_devoir != value))
				{
					this._id_devoir = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_absent", DbType="Bit NOT NULL")]
		public bool absent
		{
			get
			{
				return this._absent;
			}
			set
			{
				if ((this._absent != value))
				{
					this._absent = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_note", DbType="Float NOT NULL")]
		public double note
		{
			get
			{
				return this._note;
			}
			set
			{
				if ((this._note != value))
				{
					this._note = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
